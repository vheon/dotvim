# Prototype Library  ----------------------------------------------------------
snippet class
	var ${1:MyClass} = Class.create(${2:Super}, {
		initialize: function(${3:args}) {
			${4}
		}
	});
snippet addMethods
	${1:Class}.addMethods({
		${2:method}: function(${3:args}) {
			${4}
		}
	});
# Prototype Object
snippet clone
	Object.clone(${1:obj});${2}
snippet extend
	Object.extend(${1:destination}, ${2:source});${3}
snippet inspect
	Object.inspect(${1:obj});${2}
snippet keys
	Object.keys(${1:obj});${2}
snippet values
	Object.values(${1:obj});${2}
# Prototype Ajax
snippet ajax Ajax.PeriodicalUpdater
	new Ajax.PeriodicalUpdater('${1:container}', '${2:url}', 
		{ method: '${3:get/post}', frequency: ${4:3}, decay: ${5:2} }
	);${6}
snippet ajax Ajax.Request
	new Ajax.Request('${1:url}', {
		onSuccess: function(response) {
			${2:// Handle the response content...}
		}
	});
snippet ajax Ajax.Updater
	new Ajax.Updater('items', '/items', 
		{ parameters: { text: $F('text') } }
	);
# Prototype Enumerables
snippet all
	all(function(${1:value}) {
		${3}
	}, ${2:context});
snippet any
	any(function(${1:value}) {
		${3}
	}, ${2:context});
snippet collect
	collect(function(${1:value}) {
		${3}
	}, ${2:context});
snippet detect
	detect(function(${1:value}) {
		${3}
	}, ${2:context});
snippet each
	each(function(${1:value}) {
		${3}
	}, ${2:context});
snippet eachSlice
	eachSlice(${1:number}, function(${2:value}) {
		${4}
	}, ${3:context});
snippet findAll
	findAll(function(${1:value}) {
		${3}
	}, ${2:context});
snippet inject
	inject(${1:initial_value}, function(${2:accumulator}, ${3:value}) {
		${5}
		return $2;
	}, ${4:context});
snippet invoke
	invoke('${1:methodName}', ${2:optional_args});${3}
snippet partion
	partion(function(${1:value}) {
		${3}
	}, ${2:context});
snippet pluck
	pluck('${1:property}');${2}
snippet reject
	reject(function(${1:value}) {
		${3}
	}, ${2:context});
snippet sortBy
	sortBy(function(${1:value}) {
		${3}
	}, ${2:context});
# Prototype Event
snippet observe
	observe('${1:eventName}', ${2:handler});${3}
snippet stopObserving
	stopObserving('${1:eventName}', ${2:handler});${3}
snippet loaded
	document.observe('dom:loaded', function() {
		${1:// add initialize calls}
	});
# Prototype Functions
snippet bind
	bind(${1:this});${2}
snippet bindc
	bind(${1:this}, ${2:curry});${3}
snippet curry
	curry(${1:args});${2}
# Prototype Elements
snippet elabs
	absolutize();${1}
snippet elacn
	addClassName('${1:className}');${2}
snippet eladj
	adjacent('${1:selector...}');${2}
snippet elanc
	ancestors();${1}
snippet elce
	childElements();${1}
snippet elcl
	clone('${1:element}', ${2:isDeep});${3}
snippet eldo
	descendantOf('${1:ancestor}');${2}
snippet eldes
	descendants();${1}
snippet eld
	down(${1:selector/index});${2}
snippet elempty
	empty();${1}
snippet elext
	extend();${1}
snippet elfire
	fire('${1:eventName}', ${2:curry});${3}
snippet elfd
	firstDescendant();${1}
snippet elgd
	getDimensions();${1}
snippet elgh
	getHeight();${1}
snippet elgw
	getWidth();${1}
snippet elgo
	getOpacity();${1}
snippet elgs
	getStyle('${1:style}');${2}
snippet elha
	hasStyle('${1:style}');${2}
snippet elhcn
	hasClassName('${1:className}');${2}
snippet elh
	hide();${1}
snippet elid
	identify();${1}
snippet eli
	insert('${1:content}');${2}
snippet elio
	insert({
		before: "${1:content}",
		after: "${2:content}",
		top: "${3:content}",
		bottom: "${4:content}"
	});${5}
snippet elmatch
	match('${1:selector}');${2}
snippet eln
	next(${1:selector/index});${2}
snippet elns
	nextSiblings();${1}
snippet elp
	previous(${1:selector/index});${2}
snippet elps
	previousSiblings();${1}
snippet elra
	readAttribute('${1:attributeName}');${2}
snippet elrc
	recursivelyCollect('${1:property}');${2}
snippet elrel
	relativize();${1}
snippet elr
	remove();${1}
snippet elrcn
	removeClassName('${1:className}');${2}
snippet elrepl
	replace(${1:content});${2}
snippet elst
	scrollTo();${1}
snippet els
	select('${1:expression}');${2}
snippet elso
	setOpacity(${1:opacity});${2}
snippet elss
	setStyle({
		${1:prop}: ${2:value}${3:,}
	});
snippet elsh
	show();${1}
snippet elsibs
	siblings();${1}
snippet elt
	toggle();${1}
snippet eltcn
	toggleClassName('${1:className}');${2}
snippet elu
	up(${1:selector/index});${2}
snippet elupd
	update(${1:content});${2}
snippet elv
	visible();${1}
snippet elwa
	writeAttribute(${1:attribute});${2}
# Scriptaculous ---------------------------------------------------------------
snippet efo
	new Effect.Opacity(${1:element}, {${2:options}});${3}
snippet efs
	new Effect.Scale(${1:element}, ${2:percent}, {${3:options}});${4}
snippet efmrf
	new Effect.Morph(${1:element}, {style: ${2:styles}}, {${3:options}});${4}
snippet efm
	new Effect.Move(${1:element}, {${2:options}});${3}
snippet efh
	new Effect.Highlight(${1:element}, {${2:options}});${3}
snippet eft
	new Effect.Tween(${1:element}, ${2:start}, ${3:end}, {${4:options}}, ${5:callback});${6}
snippet efp
	new Effect.Parallel([
			${1:array of subeffects}
		], 
		{${2:options}}
	);${3}
snippet tranny Sinoidal
	Effect.Transitions.sinoidal
snippet tranny Linear
	Effect.Transitions.linear
snippet tranny Reverse
	Effect.Transitions.reverse
snippet tranny Wobble
	Effect.Transitions.wobble
snippet tranny Flicker
	Effect.Transitions.flicker
snippet tranny Pulse
	Effect.Transitions.pulse
snippet tranny Spring
	Effect.Transitions.spring
snippet tranny None
	Effect.Transitions.none
snippet tranny Full
	Effect.Transitions.full
