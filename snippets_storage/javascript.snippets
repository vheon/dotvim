# Native JS
# -----------------------------------------------------------------------------
snippet prototype
	${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
		${4:// body...}
	};
snippet fun
	function ${1:function_name}(${2:argument}) {
		${3:// body...}
	}
snippet anon
	(function (${1:exports}) {
		${3:// body}
	}(${2:this}));
snippet f
	function (${1}) {
		${2}
	}
snippet vf
	var ${1:var_name} = function (${2:argument}) {
		${3:// body...}
	};
snippet if
	if (${1:true}) {
		${2}
	}
snippet else
	else {
		${1}
	}
	${2}
snippet ter
	(${1:/* condition */}) ? ${2:a} : ${3:b};
snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
snippet for
	for (var ${2:i} = 0, ${3:len} = ${1:Things}.length; $2 < $3; $2 += 1) {
		${4:$1[$2]};
	}
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3: -= 1}) {
		${4:$1[$2]};
	}
snippet forownin
	for (var ${1:prop} in ${2:Things}) {
		if($2.hasOwnProperty($1)) {
			${3:code...}
		}
	}
snippet forin
	for (var ${1:prop} in ${2:Things}) {
		${3:code}
	}
snippet while
	while (${1:/* condition */}) {
		${2:/* code */}
	}
snippet do
	do {))
		${2:/* code */}
	} while (${1:/* condition */});
snippet return
	return ${1};
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
snippet :,
	${1:value_name}: ${2:value}${3:,}
snippet timeout
	setTimeout(function() {
		${2}
	}, ${1:ms});
snippet interval
	setInterval(function() {
		${2}
	}, ${1:ms});
snippet getBy
	getElementsBy${1:Id/TagName}('${2}');
snippet hr
	// ----------------------------------------------------------------------------
snippet self
	var self = this;${1}
snippet doc
	/**
	 * ${1:Description}
	 *
	 */
snippet @pro
	@property {${1:type}} ${2:description}
snippet @ret
	@return {${1:type}} ${2}
snippet log
	console.log(${1});${2}
snippet :error
	console.error(${1});${2}
snippet trace
	console.log('${1:var} is ' + $1);${2}
snippet :inspect
	for (var ${1:prop} in ${2:obj}) {
		console.log($1 + ': ' + $2[$1]);${3}
	}
snippet lint
	/*global ${1:Global} */
snippet sc
	 + ${1:content} + ${2}
snippet throw
	throw new Error('${1:e}');${2}
snippet try
	try {
		${1}
	} catch (err) {
		${2}
	}
snippet var
	var ${1:name} = ${2:value};${3}
